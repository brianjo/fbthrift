"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2065],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>o,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>p,withMDXComponents:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},s.apply(this,arguments)}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function d(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),m=function(e){return function(t){var r=p(t.components);return n.createElement(e,s({},t,{components:r}))}},p=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):d(d({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),m=p(r),c=a,f=m["".concat(i,".").concat(c)]||m[c]||u[c]||s;return r?n.createElement(f,d(d({ref:t},o),{},{components:r})):n.createElement(f,d({ref:t},o))}));function x(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=f;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var o=2;o<s;o++)i[o]=r[o];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},54458:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var n=r(83117),a=(r(67294),r(3905));const s={state:"draft",sidebar_position:3},i="Server RPC tests",d={unversionedId:"guide/conformance/testsuite/server-rpc",id:"guide/conformance/testsuite/server-rpc",title:"Server RPC tests",description:"Framework",source:"@site/../doc/guide/conformance/testsuite/server-rpc.md",sourceDirName:"guide/conformance/testsuite",slug:"/guide/conformance/testsuite/server-rpc",permalink:"/fbthrift/docs/guide/conformance/testsuite/server-rpc",draft:!1,editUrl:"https://github.com/facebook/fbthrift/blob/main/thrift/website/../doc/guide/conformance/testsuite/server-rpc.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{state:"draft",sidebar_position:3},sidebar:"sidebar",previous:{title:"Client RPC tests",permalink:"/fbthrift/docs/guide/conformance/testsuite/client-rpc"},next:{title:"Experimental Features",permalink:"/fbthrift/docs/experimental/"}},l={},o=[{value:"Framework",id:"framework",level:2},{value:"Test cases",id:"test-cases",level:2},{value:"Request response",id:"request-response",level:3},{value:"Streaming",id:"streaming",level:3},{value:"Sink",id:"sink",level:3}],m={toc:o};function p(e){let{components:t,...s}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"server-rpc-tests"},"Server RPC tests"),(0,a.mdx)("h2",{id:"framework"},"Framework"),(0,a.mdx)("p",null,"The following diagram shows the server RPC conformance test framework."),(0,a.mdx)("p",null,(0,a.mdx)("img",{alt:"Server RPC test framework",src:r(73358).Z,width:"2390",height:"626"})),(0,a.mdx)("p",null,"Server RPC test framework consist of a test runner and a C++ client. Test runner spawns a new test server for the target language and execute the tests. Each test runs in 3 steps."),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Client notifies the server with the ",(0,a.mdx)("inlineCode",{parentName:"li"},"sendTestCase")," API, sends ",(0,a.mdx)("inlineCode",{parentName:"li"},"RpcTestCase")," which contains ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerInstruction"),". Server ",(0,a.mdx)("strong",{parentName:"li"},"should")," store ",(0,a.mdx)("inlineCode",{parentName:"li"},"RpcTestCase")," temporarily for the next step."),(0,a.mdx)("li",{parentName:"ol"},"Client executes the test with an optional parameter defined in ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientInstruction"),". Server performs instructions defined in ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerInstruction"),". Server stores the result in temporary ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerTestResult"),", and client stores response in temporary ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientTestResult"),"."),(0,a.mdx)("li",{parentName:"ol"},"Client compares the ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientTestResult")," from the expected ",(0,a.mdx)("inlineCode",{parentName:"li"},"RpcTestCase")," and actual result from server. Client requests server for stored ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerTestResult")," with ",(0,a.mdx)("inlineCode",{parentName:"li"},"getTestResult")," method. Server responds with stored ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerTestResult")," from step #2. Client compares it with ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerTestResult")," from the expected ",(0,a.mdx)("inlineCode",{parentName:"li"},"RpcTestCase"),".")),(0,a.mdx)("p",null,"Note that, the server stores state between each test steps. Some servers (i.e Hack) may not store state as each of the steps may go to a different instance of the servers. A stateless version which merge 3 steps into one is also available. This might have some limitation for the test cases though, i.e if the server has to be configured before step #2."),(0,a.mdx)("h2",{id:"test-cases"},"Test cases"),(0,a.mdx)("p",null,"Test cases below describes available tests, the behavior in step #2, test API invoked by the test client in step #2 and the expected result in ",(0,a.mdx)("inlineCode",{parentName:"p"},"ServerTestResult"),"."),(0,a.mdx)("h3",{id:"request-response"},"Request response"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Test"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Expected result in ServerTestResult"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Basic"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a request-response request from a client and runs the corresponding RPC handler for the RPC specified in the request and sends back the response defined in ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseBasicServerInstruction.response"),".",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"Response requestResponseBasic(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server throws user-declared exception"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a request-response request from a client, runs the RPC handler for the method specified in the request, the handler throws a user-declared exception defined in ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseDeclaredExceptionServerInstruction.userException"),".",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"void requestResponseDeclaredException(1: Request req) throws (1: UserException e,);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server throws undeclared exception"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a request-response request from a client, runs the RPC handler for the method specified in the request, the handler throws a runtime exception with ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseUndeclaredExceptionServerInstruction.exceptionMessage")," which is serialized as a ",(0,a.mdx)("inlineCode",{parentName:"td"},"TApplicationException")," and sent to the client.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"void requestResponseUndeclaredException(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"No Argument and void response"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a request with no argument, and response with a void response.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"void requestResponseNoArgVoidResponse();")),(0,a.mdx)("td",{parentName:"tr",align:"left"})),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Fragmentation"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives fragmented request-response request and sends a large response utilizing fragmentation. It reuses request-response basic testcase."),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request")))),(0,a.mdx)("h3",{id:"streaming"},"Streaming"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Test"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Expected result in ServerTestResult"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Basic"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a stream request from a client and sends stream payloads and completes the stream.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"stream<Response> streamBasic(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial response payload"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a stream request from a client and responds with a first response payload as well as stream payloads and completes the stream.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"Response, stream<Response> streamInitialResponse(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Credit timeout"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a stream request from a client and sends payloads until it has no credits remaining, at which point the credit timeout will begin and eventually expire, causing the server to send a credit timeout exception and closing the stream.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"stream<Response> streamCreditTimeout(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request")))),(0,a.mdx)("h3",{id:"sink"},"Sink"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Test"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Expected result in ServerTestResult"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Basic"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a sink request and receives sink payloads from client and sends a final response after the sink completes.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"sink<Request, Response> sinkBasic(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request and received payloads")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Chunk timeout"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server receives a sink request and waits for sink chunk timeout to expire (since client is not sending any payloads) and sends a chunk timeout error to the client.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"sink<Request, Response> sinkChunkTimeout(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial request, received payloads and chunk timeout flag")))))}p.isMDXComponent=!0},73358:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/server-rpc-test-bf2370bb6beafd978af4212dd04d4cb2.png"}}]);