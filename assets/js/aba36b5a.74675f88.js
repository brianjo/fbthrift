"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8443],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){return function(t){var n=p(t.components);return a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,u=d["".concat(l,".").concat(m)]||d[m]||h[m]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(83117),r=(n(67294),n(3905));const i={state:"draft"},l="Channels in C++",o={unversionedId:"cpp/channel",id:"cpp/channel",title:"Channels in C++",description:"Prerequisite: Thrift Channels",source:"@site/../doc/cpp/channel.md",sourceDirName:"cpp",slug:"/cpp/channel",permalink:"/docs/cpp/channel",draft:!1,editUrl:"https://github.com/facebook/fbthrift/blob/main/thrift/website/../doc/cpp/channel.md",tags:[],version:"current",frontMatter:{state:"draft"},sidebar:"sidebar",previous:{title:"C++",permalink:"/docs/cpp/"},next:{title:"Cpp2 ThriftServer",permalink:"/docs/cpp/cpp2"}},s={},c=[{value:"Untyped channel in C++",id:"untyped-channel-in-c",level:2},{value:"Metadata",id:"metadata",level:3},{value:"Callback",id:"callback",level:3},{value:"Request-response:",id:"request-response",level:4},{value:"Streaming:",id:"streaming",level:4},{value:"Interactions",id:"interactions",level:3},{value:"Ordering",id:"ordering",level:3},{value:"Threading",id:"threading",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"channels-in-c"},"Channels in C++"),(0,r.mdx)("p",null,"Prerequisite: ",(0,r.mdx)("a",{parentName:"p",href:"../spec/protocol/channel"},"Thrift Channels")),(0,r.mdx)("h2",{id:"untyped-channel-in-c"},"Untyped channel in C++"),(0,r.mdx)("p",null,"The C++ API is called RequestChannel and provides several methods with this signature pattern:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"void sendRequest{Kind}(\n      RpcOptions&&,\n      MethodMetadata&&,\n      SerializedRequest&&,\n      std::shared_ptr\u2039apache::thrift::transport::THeader\u203a,\n      {CallbackPtr});\n")),(0,r.mdx)("p",null,"CallbackPtr has the following type:"),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"{Kind}"),(0,r.mdx)("th",{parentName:"tr",align:null},"{CallbackPtr}"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Response"),(0,r.mdx)("td",{parentName:"tr",align:null},"std::unique_ptr\u2039RequestClientCallback,Deleter\u203a")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Stream"),(0,r.mdx)("td",{parentName:"tr",align:null},"StreamClientCallback*")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"Sink"),(0,r.mdx)("td",{parentName:"tr",align:null},"SinkClientCallback*")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},"NoReponse (deprecated)"),(0,r.mdx)("td",{parentName:"tr",align:null},"std::unique_ptr\u2039RequestClientCallback,Deleter\u203a")))),(0,r.mdx)("p",null,"Callbacks are fundamental to asynchrony in C++, and provide the flexibility to integrate with the asynchrony pattern in the target language. The callback can fulfill a Promise, trigger an Event, or send a Message for example. Each callback has a specific contract which the channel guarantees to respect, documented under ",(0,r.mdx)("a",{parentName:"p",href:"#callback"},"Callback"),"\nCallback implementations are typically self-managed (i.e. they are heap-allocated and call ",(0,r.mdx)("inlineCode",{parentName:"p"},"delete this")," when completed), though this is not required. This is possible because of the strictness of the aforementioned contracts, which guarantee that a terminal state will be reached once the channel has taken in the callback so that freeing the callback in the terminal state is sufficient to prevent leaks."),(0,r.mdx)("h3",{id:"metadata"},"Metadata"),(0,r.mdx)("p",null,"Metadata is split between MethodMetadata (which contains information intrinsic to the method like name, kind, and retriability) and THeader, which contains most other fields including serialization protocol and compression information.\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/fbthrift/blob/main/thrift/lib/cpp/transport/THeader.cpp"},"These fields")," are specified by using a magic key in the unstructured header map."),(0,r.mdx)("h3",{id:"callback"},"Callback"),(0,r.mdx)("h4",{id:"request-response"},"Request-response:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"class RequestClientCallback {\n public:\n  virtual void onResponse(ClientReceiveState&&) noexcept = 0;\n  virtual void onResponseError(folly::exception_wrapper) noexcept = 0;\n}\n")),(0,r.mdx)("p",null,"onResponse is called for responses and declared exceptions, and passed a struct containing the serialized response buffer and some metadata. onResponseError is called for undeclared exceptions, including transport errors. It is guaranteed that exactly one of these will be called."),(0,r.mdx)("h4",{id:"streaming"},"Streaming:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"class StreamClientCallback {\n public:\n  FOLLY_NODISCARD virtual bool onFirstResponse(\n      FirstResponsePayload&&, folly::EventBase*, StreamServerCallback*) = 0;\n  virtual void onFirstResponseError(folly::exception_wrapper) = 0;\n\n  FOLLY_NODISCARD virtual bool onStreamNext(StreamPayload&&) = 0;\n  virtual void onStreamError(folly::exception_wrapper) = 0;\n  virtual void onStreamComplete() = 0;\n\n  // not terminating\n  virtual void resetServerCallback(StreamServerCallback&) = 0;\n};\n")),(0,r.mdx)("p",null,"onFirstResponse and onFirstResponseError are equivalent to onResponse and onResponseError for request-response, with the exception that onFirstResponse also receives a server callback for sending outgoing payloads and events. The methods form the edges of a state machine documented ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/fbthrift/blob/main/thrift/lib/cpp2/async/StreamCallbacks.h"},"here.")," It is guaranteed that the state machine will transition to the terminal state. It is the implementer\u2019s responsibility to respect the per-stream flow control and to return the correct boolean value.\nSink has a similar structure documented ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/fbthrift/blob/main/thrift/lib/cpp2/async/StreamCallbacks.h"},"here.")),(0,r.mdx)("h3",{id:"interactions"},"Interactions"),(0,r.mdx)("p",null,"To send methods over an interaction you must call ",(0,r.mdx)("inlineCode",{parentName:"p"},"createInteraction,")," store the returned object and pass it to ",(0,r.mdx)("inlineCode",{parentName:"p"},"RpcOptions::setInteractionId")," for each request, then pass it to ",(0,r.mdx)("inlineCode",{parentName:"p"},"terminateInteraction")," to dispose of it. (It will crash the program if destroyed any other way). It is not necessary to wait for responses before calling terminateInteraction."),(0,r.mdx)("h3",{id:"ordering"},"Ordering"),(0,r.mdx)("p",null,"Multiple requests sent over one channel are not ordered with one another. Requests sent in a single interaction are ordered with one another, but responses (including stream payloads) are not ordered with those for other requests in the same interaction. The payloads of a single stream are ordered."),(0,r.mdx)("h3",{id:"threading"},"Threading"),(0,r.mdx)("p",null,"The thread-safety of a RequestChannel is determined by the return value of its ",(0,r.mdx)("inlineCode",{parentName:"p"},"getEventBase()")," method.\nChannels that return non-null can only be accessed from that EventBase\u2019s thread, including for construction and destruction. (These channels are typically constructed from a ",(0,r.mdx)("inlineCode",{parentName:"p"},"folly::AsyncTransport")," and will return the EventBase associated with that transport).\nChannels that return nullptr are thread safe: they can be accessed from any thread, including concurrently from multiple threads."))}p.isMDXComponent=!0}}]);