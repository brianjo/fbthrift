"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1417],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>o,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),m=function(e){return function(t){var n=p(t.components);return r.createElement(e,s({},t,{components:n}))}},p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},x=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,o=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,x=m["".concat(i,".").concat(c)]||m[c]||u[c]||s;return n?r.createElement(x,d(d({ref:t},o),{},{components:n})):r.createElement(x,d({ref:t},o))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=x;var d={};for(var l in t)hasOwnProperty.call(t,l)&&(d[l]=t[l]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var o=2;o<s;o++)i[o]=n[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}x.displayName="MDXCreateElement"},3311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>d,toc:()=>o});var r=n(83117),a=(n(67294),n(3905));const s={state:"draft",sidebar_position:2},i="Client RPC tests",d={unversionedId:"guide/conformance/testsuite/client-rpc",id:"guide/conformance/testsuite/client-rpc",title:"Client RPC tests",description:"Framework",source:"@site/../doc/guide/conformance/testsuite/client-rpc.md",sourceDirName:"guide/conformance/testsuite",slug:"/guide/conformance/testsuite/client-rpc",permalink:"/fbthrift/docs/guide/conformance/testsuite/client-rpc",draft:!1,editUrl:"https://github.com/facebook/fbthrift/blob/main/thrift/website/../doc/guide/conformance/testsuite/client-rpc.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{state:"draft",sidebar_position:2},sidebar:"sidebar",previous:{title:"Data tests",permalink:"/fbthrift/docs/guide/conformance/testsuite/data"},next:{title:"Server RPC tests",permalink:"/fbthrift/docs/guide/conformance/testsuite/server-rpc"}},l={},o=[{value:"Framework",id:"framework",level:2},{value:"Test cases",id:"test-cases",level:2},{value:"Request response",id:"request-response",level:3},{value:"Streaming",id:"streaming",level:3},{value:"Sink",id:"sink",level:3}],m={toc:o};function p(e){let{components:t,...s}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"client-rpc-tests"},"Client RPC tests"),(0,a.mdx)("h2",{id:"framework"},"Framework"),(0,a.mdx)("p",null,"The following diagram shows the client RPC conformance test framework."),(0,a.mdx)("p",null,(0,a.mdx)("img",{alt:"Client RPC test framework",src:n(45386).Z,width:"2390",height:"626"})),(0,a.mdx)("p",null,"Client RPC test framework consist of a test runner and a C++ server. Test runner spawns a new test client for the target language and execute the tests. Each test runs in 3 steps."),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"Client connects to the server and fetch the test case with ",(0,a.mdx)("inlineCode",{parentName:"li"},"getTestCase")," method. It returns a ",(0,a.mdx)("inlineCode",{parentName:"li"},"RpcTestCase")," which contains ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientInstruction"),", which stores input parameters for the next step."),(0,a.mdx)("li",{parentName:"ol"},"Client invokes the actual test method with the input parameters defined in ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientInstruction"),". Server performs instructions defined in ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerInstruction"),". Server stores the result in temporary ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerTestResult"),", and client stores response from test API in temporary ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientTestResult"),"."),(0,a.mdx)("li",{parentName:"ol"},"Client sends the stored ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientTestResult")," to server with ",(0,a.mdx)("inlineCode",{parentName:"li"},"sendTestResult")," method. Server compares the received ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClientTestResult")," from the expected client result in ",(0,a.mdx)("inlineCode",{parentName:"li"},"RpcTestCase"),". Server then compares the actual stored ",(0,a.mdx)("inlineCode",{parentName:"li"},"ServerTestResult")," from the test method with the expected server test result in ",(0,a.mdx)("inlineCode",{parentName:"li"},"RpcTestCase"),".")),(0,a.mdx)("h2",{id:"test-cases"},"Test cases"),(0,a.mdx)("p",null,"Test cases below describes available tests, the behavior in step #2, test method invoked by the test client in step #2 and the expected result in ",(0,a.mdx)("inlineCode",{parentName:"p"},"ClientTestResult"),"."),(0,a.mdx)("h3",{id:"request-response"},"Request response"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Test"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Expected result in ClientTestResult"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Basic"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client sends a regular request-response request with ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseBasicClientInstruction.request")," and receives the expected result from the server.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"Response requestResponseBasic(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The response struct")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server throws user-declared exception"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client sends a regular request-response request with ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseDeclaredExceptionClientInstruction.request"),", server throws a user-declared exception. Client should catch user exception and send it back to the server using sendTestResult() API.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"void requestResponseDeclaredException(1: Request req) throws (1: UserException e);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The exception struct")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Server throws undeclared exception"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client sends a regular request-response request with ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseUndeclaredExceptionClientInstruction.request"),", server throws an undeclared exception in response. Client should catch ",(0,a.mdx)("inlineCode",{parentName:"td"},"TApplicationException")," and send exception message back to the server using sendTestResult() API.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"void requestResponseUndeclaredException(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The exception message string")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"No Argument and void response"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client sends a request-response request with no argument.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"void requestResponseNoArgVoidResponse();")),(0,a.mdx)("td",{parentName:"tr",align:"left"})),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Fragmentation"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client sends a large request-response request (to force fragmentation) with ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseBasicClientInstruction.request")," and server responds with a large response. Client should be able to successfully fragment the request and reassemble the fragmented response. It reuses request-response basic testcase."),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The response struct")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Timeout"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client sends a request with ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseTimeoutClientInstruction.request")," and doesn't receive a response from server within ",(0,a.mdx)("inlineCode",{parentName:"td"},"RequestResponseTimeoutClientInstruction.timeOutMs")," causing receive timeout to expire. Client should catch ",(0,a.mdx)("inlineCode",{parentName:"td"},"TTransportException"),", verify that it's of a ",(0,a.mdx)("inlineCode",{parentName:"td"},"TIMED_OUT")," type and aknowledge received exception with the sendTestResult() API.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"Response requestResponseTimeout(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},(0,a.mdx)("inlineCode",{parentName:"td"},"TTransportException")," raised")))),(0,a.mdx)("h3",{id:"streaming"},"Streaming"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Test"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Expected result in ClientTestResult"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Basic"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client initiates a stream and receives payloads/completion from server.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"stream<Response> streamBasic(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"List of stream payloads received")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Initial response payload"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client initiates a stream that is defined to also return a payload on the first response.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"Response, stream<Response> streamInitialResponse(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The first response and the list of stream payloads received")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Subsequent credits"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client initiates a stream and specifies the initial number of credits to be less than the expected number of total credits. Client should be able to send REQUEST_N frames to give the server more credits in order to receive all payloads.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)),(0,a.mdx)("td",{parentName:"tr",align:"left"},"List of stream payloads received")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Chunk Timeout"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client initiates a stream and waits for the chunk timeout to expire, causing it to raise TTransportException.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"stream<Response> streamChunkTimeout(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The exception message string.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Credit timeout"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client initiates a stream and forces server to consume all of its credits without receiving any credits from the client (ie. doesn't send any REQUEST_N frames), causing the server to send a credit timeout to the client.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"stream<Response> streamCreditTimeout(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The exception message string.")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Fragmentation"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client initiates a stream with a large request to force fragmentation and server responds with a large first response as well as large stream payloads. Client should be able to fragment the request and reassemble the fragmented responses.",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"Response, stream<Response> streamInitialResponse(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The first response and the list of stream payloads received")))),(0,a.mdx)("h3",{id:"sink"},"Sink"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:"left"},"Test"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Description"),(0,a.mdx)("th",{parentName:"tr",align:"left"},"Expected result in ClientTestResult"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:"left"},"Basic"),(0,a.mdx)("td",{parentName:"tr",align:"left"},"Client initiates a sink, sends payloads to server, completes the sink, and receives a final response from the server. ",(0,a.mdx)("br",null),(0,a.mdx)("br",null)," ",(0,a.mdx)("inlineCode",{parentName:"td"},"sink<Request, Response> sinkBasic(1: Request req);")),(0,a.mdx)("td",{parentName:"tr",align:"left"},"The final response")))))}p.isMDXComponent=!0},45386:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/client-rpc-test-76595fd50584321395b106ebdba7c465.png"}}]);