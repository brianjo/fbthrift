"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3674],{3905:(e,r,t)=>{t.r(r),t.d(r,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>h,useMDXComponents:()=>f,withMDXComponents:()=>d});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(){return o=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},o.apply(this,arguments)}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),d=function(e){return function(r){var t=f(r.components);return n.createElement(e,o({},r,{components:t}))}},f=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},m=function(e){var r=f(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=f(t),m=a,u=d["".concat(i,".").concat(m)]||d[m]||p[m]||o;return t?n.createElement(u,s(s({ref:r},c),{},{components:t})):n.createElement(u,s({ref:r},c))}));function h(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},85314:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=t(83117),a=(t(67294),t(3905));const o={slug:"/",sidebar_position:1},i="Introduction",s={unversionedId:"intro",id:"intro",title:"Introduction",description:"Thrift is a serialization and RPC",source:"@site/../doc/intro.md",sourceDirName:".",slug:"/",permalink:"/fbthrift/docs/",draft:!1,editUrl:"https://github.com/facebook/fbthrift/blob/main/thrift/website/../doc/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/",sidebar_position:1},sidebar:"sidebar",next:{title:"Glossary",permalink:"/fbthrift/docs/glossary"}},l={},c=[{value:"A Code Generator",id:"a-code-generator",level:2},{value:"A Serialization Framework",id:"a-serialization-framework",level:2},{value:"An RPC Framework",id:"an-rpc-framework",level:2}],d={toc:c};function f(e){let{components:r,...o}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},d,o,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"introduction"},"Introduction"),(0,a.mdx)("p",null,"Thrift is a serialization and ",(0,a.mdx)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Remote_procedure_call"},"RPC"),"\n(Remote Procedure Call) framework for service communication. Thrift enables\nthese features in all major languages, and there is strong support for C++,\nPython, Hack, and Java. Most services at Facebook are written using Thrift for\nRPC, and some storage systems use Thrift for serializing records on disk.\nOur version, ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebook/fbthrift"},"FBThrift"),", is based on\n",(0,a.mdx)("a",{parentName:"p",href:"https://thrift.apache.org/"},"Apache Thrift"),", and is open sourced."),(0,a.mdx)("p",null,"At a high level, Thrift is three major things:"),(0,a.mdx)("h2",{id:"a-code-generator"},"A Code Generator"),(0,a.mdx)("p",null,"Thrift has a code generator which generates data structures that can be\nserialized using Thrift, and client and server stubs for RPC, in different\nlanguages."),(0,a.mdx)("h2",{id:"a-serialization-framework"},"A Serialization Framework"),(0,a.mdx)("p",null,"Thrift has a set of protocols for serialization that may be used in different\nlanguages to serialize the generated structures created from the code generator."),(0,a.mdx)("h2",{id:"an-rpc-framework"},"An RPC Framework"),(0,a.mdx)("p",null,"Thrift has a framework to frame messages to send between clients and servers,\nand to call application-defined functions when receiving messages in different\nlanguages."),(0,a.mdx)("p",null,"There are several key goals for these components:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Ease of use"),": Thrift takes care of the boilerplate of serialization and\nRPC, and enables the developer to focus on the schema of the system's\nserializable types and on the interfaces of system's RPC services."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Cross language support"),": Thrift enables intercommunication between\ndifferent languages. For example, a Python client communicating with a C++\nserver."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Performance"),": Thrift structures and services enable fast serialization and\ndeserialization, and its RPC protocol and frameworks are designed with\nperformance as a feature."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"Backwards compatibility"),": Thrift allows fields to be added to and removed\nfrom serializable types in a manner that preserves backward and forward\ncompatibility.")),(0,a.mdx)("p",null,(0,a.mdx)("img",{alt:"Thrift Overview",src:t(71989).Z,width:"960",height:"720"})))}f.isMDXComponent=!0},71989:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/thrift-overview-aecec79339188e31c05e3261508e5335.jpg"}}]);