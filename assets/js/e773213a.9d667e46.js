"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9388],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>m,MDXProvider:()=>c,mdx:()=>y,useMDXComponents:()=>s,withMDXComponents:()=>l});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),l=function(e){return function(t){var n=s(t.components);return r.createElement(e,i({},t,{components:n}))}},s=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(m.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),l=s(n),c=a,d=l["".concat(p,".").concat(c)]||l[c]||f[c]||i;return n?r.createElement(d,u(u({ref:t},m),{},{components:n})):r.createElement(d,u({ref:t},m))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,p=new Array(i);p[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:a,p[1]=u;for(var m=2;m<i;m++)p[m]=n[m];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},49612:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>p,default:()=>s,frontMatter:()=>i,metadata:()=>u,toc:()=>m});var r=n(83117),a=(n(67294),n(3905));const i={},p="Function signatures",u={unversionedId:"internals/function-signatures",id:"internals/function-signatures",title:"Function signatures",description:"Here is the table of function signatures for generated client functions:",source:"@site/../doc/internals/function-signatures.md",sourceDirName:"internals",slug:"/internals/function-signatures",permalink:"/fbthrift/docs/internals/function-signatures",draft:!1,editUrl:"https://github.com/facebook/fbthrift/blob/main/thrift/website/../doc/internals/function-signatures.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Internals",permalink:"/fbthrift/docs/internals/"},next:{title:"Header format for the THeader.h",permalink:"/fbthrift/docs/internals/header-format"}},o={},m=[{value:"Legend",id:"legend",level:2},{value:"name prefix",id:"name-prefix",level:2},{value:"return type",id:"return-type",level:2},{value:"parameter type",id:"parameter-type",level:2},{value:"name prefix",id:"name-prefix-1",level:2},{value:"return type",id:"return-type-1",level:2},{value:"parameter type",id:"parameter-type-1",level:2},{value:"name prefix",id:"name-prefix-2",level:2},{value:"return type",id:"return-type-2",level:2},{value:"parameter type",id:"parameter-type-2",level:2},{value:"name prefix",id:"name-prefix-3",level:2},{value:"return type",id:"return-type-3",level:2},{value:"parameter type",id:"parameter-type-3",level:2},{value:"name prefix",id:"name-prefix-4",level:2},{value:"return type",id:"return-type-4",level:2},{value:"parameter type",id:"parameter-type-4",level:2}],l={toc:m};function s(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"function-signatures"},"Function signatures"),(0,a.mdx)("p",null,"Here is the table of function signatures for generated client functions:"),(0,a.mdx)("h2",{id:"legend"},"Legend"),(0,a.mdx)("p",null,"T = the type for the argument or return value"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"sync_input = apache::thrift2::SyncInputStream\nsync_output = apache::thrift2::SyncOutputStream\nasync_input = apache::thrift2::AsyncInputStream\nasync_output = apache::thrift2:AsyncOutputStream\n\nfunctor = std::function<void (::apache::thrift2::ClientReceiveState&&)>\nfuture = folly::Future<T>\nunit = folly::Unit\nstream_singleton = apache::thrift2::StreamSingleton\n")),(0,a.mdx)("h1",{id:"stdfunction-functions"},"std::function functions"),(0,a.mdx)("p",null,(0,a.mdx)("em",{parentName:"p"},"std::function functions are not generated for functions using streams")),(0,a.mdx)("h2",{id:"name-prefix"},"name prefix"),(0,a.mdx)("p",null,"(none), functor_"),(0,a.mdx)("h2",{id:"return-type"},"return type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"thrift return |    no stream parameters                with stream parameters\n    type      |\n---------------------------------------------------------------------------\nvoid          |    void f(functor, ...)                    not available\n              |\nsimple        |    void f(functor, ...)                    not available\n              |\ncomplex       |    void f(functor, ...)                    not available\n              |\nstream        |       not available                        not available\n")),(0,a.mdx)("h2",{id:"parameter-type"},"parameter type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"simple        |           T\n              |\ncomplex       |       const T&\n              |\nstream        |     not available\n")),(0,a.mdx)("h1",{id:"sync-functions"},"sync functions"),(0,a.mdx)("h2",{id:"name-prefix-1"},"name prefix"),(0,a.mdx)("p",null,"sync_"),(0,a.mdx)("h2",{id:"return-type-1"},"return type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"thrift return |    no stream parameters                with stream parameters\n    type      |\n---------------------------------------------------------------------------\nvoid          |       void f(...)                            void  f(...)\n              |\nsimple        |         T f(...)                      stream_singleton<T> f(...)\n              |\ncomplex       |     void f(T&, ...)                   stream_singleton<T> f(...)\n              |\nstream        |   sync_input<T> f(...)                    sync_input<T> f(...)\n")),(0,a.mdx)("h2",{id:"parameter-type-1"},"parameter type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"simple        |         T\n              |\ncomplex       |      const T&\n              |\nstream        |   sync_output<T>&\n")),(0,a.mdx)("h1",{id:"future-functions"},"future functions"),(0,a.mdx)("h2",{id:"name-prefix-2"},"name prefix"),(0,a.mdx)("p",null,"future_"),(0,a.mdx)("h2",{id:"return-type-2"},"return type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"thrift return |    no stream parameters                with stream parameters\n    type      |\n---------------------------------------------------------------------------\nvoid          |    future<unit> f(...)                  future<unit> f(...)\n              |\nsimple        |     future<T> f(...)                      future<T> f(...)\n              |\ncomplex       |     future<T> f(...)                      future<T> f(...)\n              |\nstream        |future<unit> f(async_input<T>&, ...)\n              |                            future<unit> f(async_input<T>&, ...)\n")),(0,a.mdx)("h2",{id:"parameter-type-2"},"parameter type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"simple        |           T\n              |\ncomplex       |        const T&\n              |\nstream        |     sync_output<T>&\n")),(0,a.mdx)("h1",{id:"async-functions"},"async functions"),(0,a.mdx)("h2",{id:"name-prefix-3"},"name prefix"),(0,a.mdx)("p",null,"(none), callback_"),(0,a.mdx)("h2",{id:"return-type-3"},"return type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"thrift return |    no stream parameters                with stream parameters\n    type      |\n---------------------------------------------------------------------------\nvoid          |       void f(...)                         void  f(...)\n              |\nsimple        |         T f(...)                    void f(async_input<T>&, ...)\n              |\ncomplex       |     void f(T&, ...)                 void f(async_input<T>&, ...)\n              |\nstream        | void f(async_input<T>&, ...)        void f(async_input<T>&, ...)\n")),(0,a.mdx)("h2",{id:"parameter-type-3"},"parameter type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"simple        |           T\n              |\ncomplex       |        const T&\n              |\nstream        |    async_output<T>&\n")),(0,a.mdx)("h1",{id:"server-functions"},"server functions"),(0,a.mdx)("h2",{id:"name-prefix-4"},"name prefix"),(0,a.mdx)("p",null,"(none)"),(0,a.mdx)("h2",{id:"return-type-4"},"return type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"thrift return |    no stream parameters                with stream parameters\n    type      |\n---------------------------------------------------------------------------\nvoid          |       void f(...)                         void f(...)\n              |\nsimple        |         T f(...)                   void f(async_output<T>&, ...)\n              |\ncomplex       |     void f(T&, ...)                void f(async_output<T>&, ...)\n              |\nstream        | void f(async_output<T>&, ...)      void f(async_output<T>&, ...)\n")),(0,a.mdx)("h2",{id:"parameter-type-4"},"parameter type"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"simple        |           T\n              |\ncomplex       |    std::unique_ptr<T>\n              |\nstream        |     async_input<T>&\n")))}s.isMDXComponent=!0}}]);