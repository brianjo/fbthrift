"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"sidebar":[{"type":"link","label":"Introduction","href":"/docs/","docId":"intro"},{"type":"link","label":"Glossary","href":"/docs/glossary","docId":"glossary"},{"type":"category","label":"Specification","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Specification Format","href":"/docs/spec/about","docId":"spec/about"},{"type":"link","label":"Conformance","href":"/docs/spec/conformance/","docId":"spec/conformance/index"},{"type":"category","label":"Definitions","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Annotations","href":"/docs/spec/definition/annotation","docId":"spec/definition/annotation"},{"type":"link","label":"Compatibility","href":"/docs/spec/definition/compatibility","docId":"spec/definition/compatibility"},{"type":"link","label":"Data Types","href":"/docs/spec/definition/data","docId":"spec/definition/data"},{"type":"link","label":"Errors and Exceptions","href":"/docs/spec/definition/exception","docId":"spec/definition/exception"},{"type":"link","label":"Interface Types","href":"/docs/spec/definition/interface","docId":"spec/definition/interface"},{"type":"link","label":"Programs","href":"/docs/spec/definition/program","docId":"spec/definition/program"},{"type":"link","label":"Tolerance","href":"/docs/spec/definition/tolerance","docId":"spec/definition/tolerance"},{"type":"link","label":"Values","href":"/docs/spec/definition/value","docId":"spec/definition/value"}],"href":"/docs/spec/definition/"},{"type":"link","label":"Glossary","href":"/docs/spec/glossary","docId":"spec/glossary"},{"type":"link","label":"Interface Definition Language (IDL)","href":"/docs/spec/idl","docId":"spec/idl"},{"type":"category","label":"Protocols","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Channels","href":"/docs/spec/protocol/channel","docId":"spec/protocol/channel"},{"type":"link","label":"Data Protocols","href":"/docs/spec/protocol/data","docId":"spec/protocol/data"},{"type":"category","label":"Interface Protocols","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Rocket Protocol","href":"/docs/spec/protocol/interface/rocket","docId":"spec/protocol/interface/rocket"}],"href":"/docs/spec/protocol/interface/"}],"href":"/docs/spec/protocol/"}],"href":"/docs/spec/"},{"type":"category","label":"User Guide","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Tutorials","href":"/docs/guide/tutorial/","docId":"guide/tutorial/index"},{"type":"category","label":"Conformance","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Test Suite","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Data tests","href":"/docs/guide/conformance/testsuite/data","docId":"guide/conformance/testsuite/data"},{"type":"link","label":"Client RPC tests","href":"/docs/guide/conformance/testsuite/client-rpc","docId":"guide/conformance/testsuite/client-rpc"},{"type":"link","label":"Server RPC tests","href":"/docs/guide/conformance/testsuite/server-rpc","docId":"guide/conformance/testsuite/server-rpc"}],"href":"/docs/guide/conformance/testsuite/"}],"href":"/docs/guide/conformance/"}],"href":"/docs/guide/"},{"type":"category","label":"Experimental Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Deterministic Hashing","href":"/docs/experimental/hash","docId":"experimental/hash"},{"type":"link","label":"Patches","href":"/docs/experimental/patch","docId":"experimental/patch"},{"type":"link","label":"Runtime Type Information (Schema)","href":"/docs/experimental/schema","docId":"experimental/schema"},{"type":"link","label":"YAML (and JSON)","href":"/docs/experimental/yaml","docId":"experimental/yaml"}],"href":"/docs/experimental/"},{"type":"category","label":"Beta Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Adapters","href":"/docs/beta/adapter","docId":"beta/adapter"},{"type":"link","label":"Dynamic Values (Any)","href":"/docs/beta/any","docId":"beta/any"}],"href":"/docs/beta/"},{"type":"category","label":"C++","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Channels in C++","href":"/docs/cpp/channel","docId":"cpp/channel"},{"type":"link","label":"Cpp2 ThriftServer","href":"/docs/cpp/cpp2","docId":"cpp/cpp2"}],"href":"/docs/cpp/"},{"type":"category","label":"Internals","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Function signatures","href":"/docs/internals/function-signatures","docId":"internals/function-signatures"},{"type":"link","label":"Header format for the THeader.h","href":"/docs/internals/header-format","docId":"internals/header-format"},{"type":"link","label":"mstch-based code generators","href":"/docs/internals/mstch","docId":"internals/mstch"},{"type":"link","label":"Thrift Protocol Structure","href":"/docs/internals/protocol-structure","docId":"internals/protocol-structure"},{"type":"link","label":"Stream classes","href":"/docs/internals/stream-classes","docId":"internals/stream-classes"}],"href":"/docs/internals/"},{"type":"link","label":"Troubleshooting","href":"/docs/troubleshooting","docId":"troubleshooting"},{"type":"link","label":"Debugging","href":"/docs/debugging","docId":"debugging"},{"type":"link","label":"References","href":"/docs/references/","docId":"references/index"},{"type":"link","label":"Releases","href":"/docs/releases","docId":"releases"},{"type":"link","label":"Contribution Guide","href":"/docs/contribution-guide","docId":"contribution-guide"}]},"docs":{"beta/adapter":{"id":"beta/adapter","title":"Adapters","description":"How to plugin your own types.","sidebar":"sidebar"},"beta/any":{"id":"beta/any","title":"Dynamic Values (Any)","description":"Any","sidebar":"sidebar"},"beta/index":{"id":"beta/index","title":"Beta Features","description":"Upcoming Thrift features that are ready to try out.","sidebar":"sidebar"},"contribution-guide":{"id":"contribution-guide","title":"Contribution Guide","description":"How to contribute to these docs.","sidebar":"sidebar"},"cpp/channel":{"id":"cpp/channel","title":"Channels in C++","description":"Prerequisite: Thrift Channels","sidebar":"sidebar"},"cpp/cpp2":{"id":"cpp/cpp2","title":"Cpp2 ThriftServer","description":"This is a re-implementation of both the generated cpp code, and a","sidebar":"sidebar"},"cpp/index":{"id":"cpp/index","title":"C++","description":"This section contains documentation for working with Thrift in C++.","sidebar":"sidebar"},"debugging":{"id":"debugging","title":"Debugging","description":"","sidebar":"sidebar"},"experimental/hash":{"id":"experimental/hash","title":"Deterministic Hashing","description":"How Thrift values are hashed.","sidebar":"sidebar"},"experimental/index":{"id":"experimental/index","title":"Experimental Features","description":"Features that are in the works.","sidebar":"sidebar"},"experimental/patch":{"id":"experimental/patch","title":"Patches","description":"How mutations for Thrift values are represented, manipulated, and applied.","sidebar":"sidebar"},"experimental/schema":{"id":"experimental/schema","title":"Runtime Type Information (Schema)","description":"The type information that is available at runtime, in all Thrift implementations.","sidebar":"sidebar"},"experimental/yaml":{"id":"experimental/yaml","title":"YAML (and JSON)","description":"How Thrift values (and patches) are representable in a standardized, restricted, strongly-typed, subset of YAML/JSON.","sidebar":"sidebar"},"glossary":{"id":"glossary","title":"Glossary","description":"Common terms and definitions","sidebar":"sidebar"},"guide/conformance/index":{"id":"guide/conformance/index","title":"Conformance","description":"Overview","sidebar":"sidebar"},"guide/conformance/testsuite/client-rpc":{"id":"guide/conformance/testsuite/client-rpc","title":"Client RPC tests","description":"Framework","sidebar":"sidebar"},"guide/conformance/testsuite/data":{"id":"guide/conformance/testsuite/data","title":"Data tests","description":"Framework","sidebar":"sidebar"},"guide/conformance/testsuite/index":{"id":"guide/conformance/testsuite/index","title":"Test Suite","description":"- Data tests","sidebar":"sidebar"},"guide/conformance/testsuite/server-rpc":{"id":"guide/conformance/testsuite/server-rpc","title":"Server RPC tests","description":"Framework","sidebar":"sidebar"},"guide/index":{"id":"guide/index","title":"User Guide","description":"- Tutorials","sidebar":"sidebar"},"guide/tutorial/index":{"id":"guide/tutorial/index","title":"Tutorials","description":"","sidebar":"sidebar"},"internals/function-signatures":{"id":"internals/function-signatures","title":"Function signatures","description":"Here is the table of function signatures for generated client functions:","sidebar":"sidebar"},"internals/header-format":{"id":"internals/header-format","title":"Header format for the THeader.h","description":"0 1 2 3 4 5 6 7 8 9 a b c d e f 0 1 2 3 4 5 6 7 8 9 a b c d e f","sidebar":"sidebar"},"internals/index":{"id":"internals/index","title":"Internals","description":"This section documents Thrift internals and is intended for developers working","sidebar":"sidebar"},"internals/mstch":{"id":"internals/mstch","title":"mstch-based code generators","description":"* Thrift Generators","sidebar":"sidebar"},"internals/protocol-structure":{"id":"internals/protocol-structure","title":"Thrift Protocol Structure","description":"Last Modified: 2007-Jun-29","sidebar":"sidebar"},"internals/stream-classes":{"id":"internals/stream-classes","title":"Stream classes","description":"The class diagram for the stream classes is shown below:","sidebar":"sidebar"},"intro":{"id":"intro","title":"Introduction","description":"Thrift is a serialization and RPC","sidebar":"sidebar"},"references/index":{"id":"references/index","title":"References","description":"","sidebar":"sidebar"},"releases":{"id":"releases","title":"Releases","description":"Thrift V1 features","sidebar":"sidebar"},"spec/about":{"id":"spec/about","title":"Specification Format","description":"Key Words and Terms","sidebar":"sidebar"},"spec/conformance/index":{"id":"spec/conformance/index","title":"Conformance","description":"How the spec is enforced.","sidebar":"sidebar"},"spec/definition/annotation":{"id":"spec/definition/annotation","title":"Annotations","description":"Structured Annotations","sidebar":"sidebar"},"spec/definition/compatibility":{"id":"spec/definition/compatibility","title":"Compatibility","description":"This spec discusses the semantics when the readers and writers interpret data using different schema. This is a common occurrence when upgrading a Thrift schema in a non-atomic fashion or reading previously stored serialized Thrift values. For example, when rolling out new clients/servers in a multi-machine environment or reading serialized values from disk or a database.","sidebar":"sidebar"},"spec/definition/data":{"id":"spec/definition/data","title":"Data Types","description":"Types that can be (de)serialized using data protocols.","sidebar":"sidebar"},"spec/definition/exception":{"id":"spec/definition/exception","title":"Errors and Exceptions","description":"How error classifications, functions qualifiers, and exceptions work together.","sidebar":"sidebar"},"spec/definition/index":{"id":"spec/definition/index","title":"Definitions","description":"Thrift concepts that can be defined and referenced through the Interface Definition Language (IDL).","sidebar":"sidebar"},"spec/definition/interface":{"id":"spec/definition/interface","title":"Interface Types","description":"Types that send and/or receive data using interface protocols.","sidebar":"sidebar"},"spec/definition/program":{"id":"spec/definition/program","title":"Programs","description":"A program consists of:","sidebar":"sidebar"},"spec/definition/tolerance":{"id":"spec/definition/tolerance","title":"Tolerance","description":"This category of conformance describes the expected behavior when a reader reads malformed data. It describes what type of behavior is expected when malformed data is encountered. It is important to verify that these cases are handled gracefully in all Thrift implementations as serialized data may be unintentionally or intentionally altered before deserialization.","sidebar":"sidebar"},"spec/definition/value":{"id":"spec/definition/value","title":"Values","description":"How Thrift values are declared, evaluated, validated, and manipulated.","sidebar":"sidebar"},"spec/glossary":{"id":"spec/glossary","title":"Glossary","description":"Terms that have a special meaning or interpretation in Thrift.","sidebar":"sidebar"},"spec/idl":{"id":"spec/idl","title":"Interface Definition Language (IDL)","description":"How to write a Thrift program.","sidebar":"sidebar"},"spec/index":{"id":"spec/index","title":"Specification","description":"Thrift supports clients/servers/readers/writers/etc, written in different languages, using different libraries, often developed and maintained by different teams. A basic example is a Java Thrift client invoking functions implemented by a C++ Thrift server. In order to have predictable and reliable behavior in such a heterogeneous environment, all Thrift libraries must support the same protocols and semantics.","sidebar":"sidebar"},"spec/protocol/channel":{"id":"spec/protocol/channel","title":"Channels","description":"The channel is the interface to Thrift RPC in each target language. While channels exist on both client and server, the term by itself commonly refers to the client channel. Here, the client and server are the two parties to the RPC where the client is the initiator.","sidebar":"sidebar"},"spec/protocol/data":{"id":"spec/protocol/data","title":"Data Protocols","description":"How data is (de)serialized.","sidebar":"sidebar"},"spec/protocol/index":{"id":"spec/protocol/index","title":"Protocols","description":"How thrift implementations communicate.","sidebar":"sidebar"},"spec/protocol/interface/index":{"id":"spec/protocol/interface/index","title":"Interface Protocols","description":"This document describes the layer immediately preceding the transport protocol (eg. Rocket). This layer specifies how the request/response data must be serialized and formatted before being wrapped in the underlying transport protocol layer\'s message format.","sidebar":"sidebar"},"spec/protocol/interface/rocket":{"id":"spec/protocol/interface/rocket","title":"Rocket Protocol","description":"This document describes the Rocket transport protocol and how it is used by Thrift to achieve the Interface Types by using RSocket.","sidebar":"sidebar"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"","sidebar":"sidebar"}}}')}}]);