"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4990],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>l,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>m,withMDXComponents:()=>d});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i.apply(this,arguments)}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),d=function(e){return function(t){var r=m(t.components);return n.createElement(e,i({},t,{components:r}))}},m=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(r),u=a,p=d["".concat(o,".").concat(u)]||d[u]||f[u]||i;return r?n.createElement(p,s(s({ref:t},l),{},{components:r})):n.createElement(p,s({ref:t},l))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},60146:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(83117),a=(r(67294),r(3905));const i={sidebar_position:2},o="Conformance",s={unversionedId:"guide/conformance/index",id:"guide/conformance/index",title:"Conformance",description:"Overview",source:"@site/../doc/guide/conformance/index.md",sourceDirName:"guide/conformance",slug:"/guide/conformance/",permalink:"/docs/guide/conformance/",draft:!1,editUrl:"https://github.com/facebook/fbthrift/blob/main/thrift/website/../doc/guide/conformance/index.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Tutorials",permalink:"/docs/guide/tutorial/"},next:{title:"Test Suite",permalink:"/docs/guide/conformance/testsuite/"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Levels",id:"levels",level:3},{value:"Categories",id:"categories",level:3},{value:"Test Groups",id:"test-groups",level:3},{value:"Conformance tests",id:"conformance-tests",level:3}],d={toc:l};function m(e){let{components:t,...r}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"conformance"},"Conformance"),(0,a.mdx)("h2",{id:"overview"},"Overview"),(0,a.mdx)("p",null,"Thrift allows client and servers to be written in different programming languages. In order to have predictable and reliable behavior in such a heterogeneous environment, all Thrift implementations must support the same semantics when crossing a serialization boundary. This boundary includes serializing and deserializing a Thrift object, as well as invoking a Thrift RPC."),(0,a.mdx)("p",null,"Thrift conformance consist of a framework which includes a thrift test client, a test server and a test runner. It allows plugging a thrift client and/or a server for the target language to the conformance test environment. It validates the target language client and/or server and produce a conformant test result."),(0,a.mdx)("h3",{id:"levels"},"Levels"),(0,a.mdx)("p",null,"There are three different levels of conformance we test for:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("strong",{parentName:"li"},"Consistency")," - This category of conformance describes the semantics when a reader and writer use the same Thrift specification. This includes semantics regarding representability, equivalence, equality, comparison, and hashing."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("strong",{parentName:"li"},"Compatibility")," - This category of conformance describes the semantics when the readers and writers interpret data using different Thrift specifications. This is a common occurrence when upgrading a Thrift specification in a non-atomic fashion or reading previously stored serialized Thrift values. For example, when rolling out new clients/servers in a multi-machine environment or reading serialized values from disk or a database."),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("strong",{parentName:"li"},"Tolerance")," - This category of conformance describes the expected behavior when a reader encounters malformed data or misbehaving peers.")),(0,a.mdx)("h3",{id:"categories"},"Categories"),(0,a.mdx)("p",null,"There are three different categories of conformance tests:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},(0,a.mdx)("a",{parentName:"strong",href:"/docs/guide/conformance/testsuite/data"},"Data"))," - Tests focus on serializing and deserializing the data."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},(0,a.mdx)("a",{parentName:"strong",href:"/docs/guide/conformance/testsuite/client-rpc"},"Client"))," - This category of conformance describes the client behavior when making a RPC call."),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},(0,a.mdx)("a",{parentName:"strong",href:"/docs/guide/conformance/testsuite/server-rpc"},"Server"))," - This category of conformance describes the server behavior when making a RPC call.\nClient/Server test focus on invoking remote procedure calls (RPCs) with request-response, streaming, sink and interactions, while data tests cover the (de)serialization of Thrift values in any context (RPC, disk, db, etc).")),(0,a.mdx)("h3",{id:"test-groups"},"Test Groups"),(0,a.mdx)("p",null,"Tests in thrift conformance are grouped. There are smoke test and regression test groups. Tests are assigned to the groups by setting a tag."),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"test/regression"),' - Tests tagged with "test/regression" are excluded from CI (Continuous Integration) builds, runs daily on stable builds.'),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("strong",{parentName:"li"},"test/smoke"),' - Tests tagged with "test/smoke" are executed on each CI build. Failure of these tests will cause a build break. The goal is to test the core functionalities quickly. Only a subset of the conformance tests are tagged with "test/smoke" as too many tests in this bucket will increase build time and eventually timeout. These tests are also executed as part of the regression tests.')),(0,a.mdx)("h3",{id:"conformance-tests"},"Conformance tests"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"fb/quickstart.md"},"Conformance Quickstart Guide")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"/docs/guide/conformance/testsuite/"},"Test Suites"))))}m.isMDXComponent=!0}}]);