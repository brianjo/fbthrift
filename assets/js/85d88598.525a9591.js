"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5984],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>o,MDXProvider:()=>x,mdx:()=>g,useMDXComponents:()=>s,withMDXComponents:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(){return d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},d.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},d=Object.keys(e);for(a=0;a<d.length;a++)n=d[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)n=d[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){return function(t){var n=s(t.components);return a.createElement(e,d({},t,{components:n}))}},s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},x=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},N=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,d=e.originalType,l=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),p=s(n),x=r,N=p["".concat(l,".").concat(x)]||p[x]||u[x]||d;return n?a.createElement(N,m(m({ref:t},o),{},{components:n})):a.createElement(N,m({ref:t},o))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var d=n.length,l=new Array(d);l[0]=N;var m={};for(var i in t)hasOwnProperty.call(t,i)&&(m[i]=t[i]);m.originalType=e,m.mdxType="string"==typeof e?e:r,l[1]=m;for(var o=2;o<d;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},73049:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>s,frontMatter:()=>d,metadata:()=>m,toc:()=>o});var a=n(83117),r=(n(67294),n(3905));const d={},l="mstch-based code generators",m={unversionedId:"internals/mstch",id:"internals/mstch",title:"mstch-based code generators",description:"* Thrift Generators",source:"@site/../doc/internals/mstch.md",sourceDirName:"internals",slug:"/internals/mstch",permalink:"/fbthrift/docs/internals/mstch",draft:!1,editUrl:"https://github.com/facebook/fbthrift/blob/main/thrift/website/../doc/internals/mstch.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Header format for the THeader.h",permalink:"/fbthrift/docs/internals/header-format"},next:{title:"Thrift Protocol Structure",permalink:"/fbthrift/docs/internals/protocol-structure"}},i={},o=[{value:"Thrift Generators",id:"thrift-generators",level:2},{value:"Creating a generator",id:"creating-a-generator",level:2},{value:"Using Templates",id:"using-templates",level:2},{value:"Writing the driver",id:"writing-the-driver",level:3},{value:"Partial Templates",id:"partial-templates",level:3},{value:"Context types",id:"context-types",level:3},{value:"<code>string</code>",id:"string",level:4},{value:"<code>bool</code>",id:"bool",level:4},{value:"<code>list&lt;?&gt;</code>",id:"list",level:4},{value:"Context structure",id:"context-structure",level:3},{value:"<code>program</code>",id:"program",level:4},{value:"<code>struct</code>",id:"struct",level:4},{value:"<code>field</code>",id:"field",level:4},{value:"<code>enum</code>",id:"enum",level:4},{value:"<code>enum_value</code>",id:"enum_value",level:4},{value:"<code>type</code>",id:"type",level:4},{value:"<code>service</code>",id:"service",level:4},{value:"<code>function</code>",id:"function",level:4},{value:"<code>annotation</code>",id:"annotation",level:4},{value:"<code>constant</code>",id:"constant",level:4},{value:"<code>value</code>",id:"value",level:4},{value:"<code>mapElement</code>",id:"mapelement",level:4},{value:"Extending Context Maps",id:"extending-context-maps",level:3},{value:"An Example: Escaping",id:"an-example-escaping",level:4},{value:"Using the new generator",id:"using-the-new-generator",level:2}],p={toc:o};function s(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"mstch-based-code-generators"},"mstch-based code generators"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#thrift-generators"},"Thrift Generators")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#creating-a-generator"},"Creating a generator")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#using-templates"},"Using Templates"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#writing-the-driver"},"Writing the driver")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#partial-templates"},"Partial Templates")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#context-types"},"Context types")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#context-structure"},"Context structure")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#extending-context-maps"},"Extending Context Maps")))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#using-the-new-generator"},"Using the new generator"))),(0,r.mdx)("h2",{id:"thrift-generators"},"Thrift Generators"),(0,r.mdx)("p",null,"A Thrift generator is a component of the Thrift compiler whose job it is to\ngenerate code from the Thrift IDL for some particular language. This generated\ncode is used to implement Thrift clients and servers in the various languages\nfor which a generator exists."),(0,r.mdx)("p",null,"This document describes how to create and use generators written using mstch,\na template library used by Thrift to increase maintainability and clarity of\nthe Thrift generators."),(0,r.mdx)("h2",{id:"creating-a-generator"},"Creating a generator"),(0,r.mdx)("p",null,"Each mstch generator is comprised of two components. Firstly, there is a C++\nsource file which drives template generation, controls output, and integrates\nthe generator with the rest of the compiler. Secondly, there are mstch template\nfiles which contain the templates to be rendered by the C++ driver."),(0,r.mdx)("p",null,"Taking the Java Swift generator as an example, the C++ driver is located in\n",(0,r.mdx)("inlineCode",{parentName:"p"},"thrift/compiler/generate/t_mstch_swift_generator.cc")," and the templates are\nlocated in ",(0,r.mdx)("inlineCode",{parentName:"p"},"thrift/compiler/generate/templates/java/swift"),". The specific\ndirectory under the ",(0,r.mdx)("inlineCode",{parentName:"p"},"templates")," root under which the templates are located is\nspecified in the constructor to ",(0,r.mdx)("inlineCode",{parentName:"p"},"t_mstch_generator"),"."),(0,r.mdx)("p",null,"Creating a new generator then requires the following steps:"),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Create the C++ file in which the driver will be contained.")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Declare a new class inheriting from ",(0,r.mdx)("inlineCode",{parentName:"li"},"t_mstch_generator")," in this file.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Include ",(0,r.mdx)("inlineCode",{parentName:"li"},"<thrift/compiler/generate/t_mstch_generator.h>")," to extend this\nclass."))),(0,r.mdx)("li",{parentName:"ul"},"Register the new generator with the rest of the compiler.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},'THRIFT_REGISTER_GENERATOR(generator_flag, "Short name", "Long name");'))))),(0,r.mdx)("ol",{start:2},(0,r.mdx)("li",{parentName:"ol"},"Implement the ",(0,r.mdx)("inlineCode",{parentName:"li"},"generate_program")," function for your generator."),(0,r.mdx)("li",{parentName:"ol"},"Write templates, iterating on the driver if necessary.")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Template filenames must end in ",(0,r.mdx)("inlineCode",{parentName:"li"},".mustache"),", and this extension will be\nstripped when loading in the map of templates. This means that the canonical\nname of a template stored in ",(0,r.mdx)("inlineCode",{parentName:"li"},"FooBar.mustache")," will be ",(0,r.mdx)("inlineCode",{parentName:"li"},"FooBar")," from within\nthe driver and other templates.")),(0,r.mdx)("h2",{id:"using-templates"},"Using Templates"),(0,r.mdx)("h3",{id:"writing-the-driver"},"Writing the driver"),(0,r.mdx)("p",null,"There are several inherited functions which are useful when implementing\n",(0,r.mdx)("inlineCode",{parentName:"p"},"generate_program")," for a mstch generator."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"t_mstch_generator::dump"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Takes an element of the Thrift AST and converts it into a mstch context\nnode that can be provided to the renderer."))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"t_mstch_generator::render"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Given the name of a template and a mstch context node, renders the template\nand returns the results as a string.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},'A template\'s name is the same as its filename, but with the trailing\n".mustache" removed.'))))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"t_mstch_generator::write_output"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Given render output and a relative path, writes the output to disk, putting\nthe generated code in the proper absolute directory and recording that\nthe file was written."))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"t_mstch_generator::get_option"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Returns the value associated with a particular\noption key passed on the command line. This lets you change small behavior\ndetails of your generator from the command line without needing a separate\ngenerator.")))),(0,r.mdx)("p",null,"A simple body for ",(0,r.mdx)("inlineCode",{parentName:"p"},"generate_program")," is as follows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-c++"},'auto context = this->dump(this->get_program());\nauto output = this->render("MyTemplate", context);\nthis->write_output("my_output_file.txt", output);\n')),(0,r.mdx)("h3",{id:"partial-templates"},"Partial Templates"),(0,r.mdx)("p",null,'From within a given template for a generator, other templates may be included\nwith the mstch inclusion syntax. If you have an existing template file named\n"Foo.mustache", it can be included by writing ',(0,r.mdx)("inlineCode",{parentName:"p"},"{{> Foo}}"),". Templates\nare permitted to recursively include themselves; however, care must be taken to\nmake sure that this terminates."),(0,r.mdx)("p",null,"Note that the final newline, if present in a partial template file, is stripped\nand not copied to the output. This allows template files to be properly\nterminated with newlines without forcing a newline in the generated code. If a\ntemplate wants to emit an explicit newline at the end, simply add a blank line\nor a commented line ",(0,r.mdx)("inlineCode",{parentName:"p"},"{{! terminate with newline }}"),"."),(0,r.mdx)("h3",{id:"context-types"},"Context types"),(0,r.mdx)("p",null,"mstch is an untyped system, and tags may have different behavior determined by\nthe structure of the context passed in from C++. For clarity of documentation,\nI ascribe to each key in the default Thrift context a type which shows how it\ncan be used."),(0,r.mdx)("p",null,"Note: Throughout the generators, I use ",(0,r.mdx)("inlineCode",{parentName:"p"},":")," as a separator in mstch keys and ",(0,r.mdx)("inlineCode",{parentName:"p"},"?"),"\nto indicate mstch keys which are booleans. These characters have no special\nmeaning within mstch, and are only used as a convention adopted by the\ngenerators."),(0,r.mdx)("h4",{id:"string"},(0,r.mdx)("inlineCode",{parentName:"h4"},"string")),(0,r.mdx)("p",null,"Keys with type ",(0,r.mdx)("inlineCode",{parentName:"p"},"string")," represent leaves in the mstch context. At template\nrender time, they expand directly into a string with no mstch control flow."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"The name of this struct is {{struct:name}}\n")),(0,r.mdx)("h4",{id:"bool"},(0,r.mdx)("inlineCode",{parentName:"h4"},"bool")),(0,r.mdx)("p",null,"Bools are keys which do not expand to text, but only indicate some property\nabout the context."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-mustache"},"{{#struct:plain?}}Rendered iff true{{/struct:plain?}}\n{{^struct:plain?}}Rendered iff false{{/struct:plain?}}\n")),(0,r.mdx)("h4",{id:"list"},(0,r.mdx)("inlineCode",{parentName:"h4"},"list<?>")),(0,r.mdx)("p",null,"Lists represent zero or more elements of some other type, and function similar\nto for-each loops in other languages. The body of the loop will be expanded\nonce per element in the list, and, on each iteration, the context will be\nextended using each member of the list. While expanding lists, two boolean keys\nnamed ",(0,r.mdx)("inlineCode",{parentName:"p"},"first?")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"last?")," will be available, indicating whether the current\niteration is the first or the last iteration, respectively."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-mustache"},"{{#program:structs}}\n  {{#first?}}This is the first struct{{/first?}}\n  This struct has the name {{struct:name}}\n  {{^last?}}This is not the last struct{{/last?}}\n{{/program:structs}}\n")),(0,r.mdx)("p",null,"You can also use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"^")," syntax with lists, which will render the block if and\nonly if the list is empty."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-mustache"},"{{^program:structs}}\n  There are no structs in this program\n{{/program:structs}}\n")),(0,r.mdx)("h3",{id:"context-structure"},"Context structure"),(0,r.mdx)("p",null,"The following describes the default structure of the mstch contexts. These\ndefaults can be extended as described in a section below. For each\ntype there is a list of the keys available from within that type, the type of\neach of those keys, and a short description of what the key means."),(0,r.mdx)("h4",{id:"program"},(0,r.mdx)("inlineCode",{parentName:"h4"},"program")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Name of thrift program")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:path")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Path to thrift source file")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:outPath")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Path to output directory for generation")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:includePrefix")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Path to include prefix for Thrift IDL")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:structs")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<struct>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Structs and Exceptions declared in this program")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:enums")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<enum>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Enums declared in this program")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:constants")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<constant>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Constants declared in this program")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"program:services")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<service>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Services declared in this program")))),(0,r.mdx)("h4",{id:"struct"},(0,r.mdx)("inlineCode",{parentName:"h4"},"struct")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"struct:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Declared name of this struct")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"struct:fields")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<field>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Fields within this struct")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"struct:union?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff declared as a union")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"struct:exception?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff declared as an exception")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"struct:plain?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff not a union or exception")))),(0,r.mdx)("h4",{id:"field"},(0,r.mdx)("inlineCode",{parentName:"h4"},"field")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"field:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Name of this field")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"field:key")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"The numeric key of this field")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"field:type")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"The declared type of this field")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"field:required?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this field is required")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"field:optional?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this field is optional")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"field:optInReqOut?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this field is optional in, required out")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"field:annotations")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<annotation>")),(0,r.mdx)("td",{parentName:"tr",align:null},"List of annotations on this field")))),(0,r.mdx)("h4",{id:"enum"},(0,r.mdx)("inlineCode",{parentName:"h4"},"enum")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"enum:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Name of this enum")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"enum:values")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<enum_value>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Values of this enum")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"enum:annotations")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<annotation>")),(0,r.mdx)("td",{parentName:"tr",align:null},"List of annotations declared on this enum")))),(0,r.mdx)("h4",{id:"enum_value"},(0,r.mdx)("inlineCode",{parentName:"h4"},"enum_value")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"enum_value:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Name of this variant of the enum")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"enum_value:value")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Integer key for this enum variant")))),(0,r.mdx)("h4",{id:"type"},(0,r.mdx)("inlineCode",{parentName:"h4"},"type")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:void?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is void")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:string?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is non-binary string")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:binary?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is binary string")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:bool?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is boolean")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:byte?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is byte")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:i16?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is i16 (16-bit signed int)")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:i32?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is i32 (32-bit signed int)")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:i64?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is i64 (64-bit signed int)")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:double?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is double")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:float?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is float")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:struct?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is a struct")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:struct")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"struct")),(0,r.mdx)("td",{parentName:"tr",align:null},"Information about struct, if this is a struct")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:service?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is a service")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:service")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"struct")),(0,r.mdx)("td",{parentName:"tr",align:null},"Information about struct, if this is a service")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:enum?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is an enum")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:enum")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"enum")),(0,r.mdx)("td",{parentName:"tr",align:null},"Information about struct, if this is an  enum")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:list?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is a list")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:listElemType")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"Type of contained elements, if this is a list")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:stream?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is a stream")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:streamElemType")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"Type of contained elements, if this is a stream")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:set?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is a set")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:setElemType")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"Type of contained elements, if this is a set")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:map?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this type is a map")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:keyType")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"Type of keys, if this is a set")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type:valueType")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"Type of values, if this is a set")))),(0,r.mdx)("h4",{id:"service"},(0,r.mdx)("inlineCode",{parentName:"h4"},"service")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"service:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Name of this service")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"service:annotations")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<annotation>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Annotations declared on this service")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"service:functions")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<function>")),(0,r.mdx)("td",{parentName:"tr",align:null},"Functions defined on this service")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"service:extends?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this service extends another service")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"service:extends")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"service")),(0,r.mdx)("td",{parentName:"tr",align:null},"The service this service extends, if one exists")))),(0,r.mdx)("h4",{id:"function"},(0,r.mdx)("inlineCode",{parentName:"h4"},"function")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"function:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Name of this function")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"function:oneway?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this function was declared oneway")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"function:returnType")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"Return type of this function")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"function:exceptions")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<field>")),(0,r.mdx)("td",{parentName:"tr",align:null},"List of checked exceptions in this function")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"function:annotations")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<annotation>")),(0,r.mdx)("td",{parentName:"tr",align:null},"List of annotations on this function")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"function:args")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<field>")),(0,r.mdx)("td",{parentName:"tr",align:null},"List of arguments taken by this function")))),(0,r.mdx)("h4",{id:"annotation"},(0,r.mdx)("inlineCode",{parentName:"h4"},"annotation")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"annotation:key")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Key for this annotation")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"annotation:value")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Value for this annotation")))),(0,r.mdx)("h4",{id:"constant"},(0,r.mdx)("inlineCode",{parentName:"h4"},"constant")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"constant:name")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"Name of this constant")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"constant:type")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"type")),(0,r.mdx)("td",{parentName:"tr",align:null},"Type of this constant")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"constant:value")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value")),(0,r.mdx)("td",{parentName:"tr",align:null},"Defined value of this constant")))),(0,r.mdx)("h4",{id:"value"},(0,r.mdx)("inlineCode",{parentName:"h4"},"value")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:double?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this value is a double")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:doubleValue")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"If this is a double, the double's value")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:integer?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this value is an integer")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:integerValue?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"If this is an integer, the integer's value")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:nonzero?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this is a non-zero numeric constant")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:string?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this value is a string")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:stringValue")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"string")),(0,r.mdx)("td",{parentName:"tr",align:null},"If this is a string, the string's value")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:list?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this value is a list of other values")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:listElements")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<value>")),(0,r.mdx)("td",{parentName:"tr",align:null},"The list of values in this list")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:map?")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"bool")),(0,r.mdx)("td",{parentName:"tr",align:null},"True iff this value is a map")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value:mapElements")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"list<mapElement>")),(0,r.mdx)("td",{parentName:"tr",align:null},"The elements in this map of values")))),(0,r.mdx)("h4",{id:"mapelement"},(0,r.mdx)("inlineCode",{parentName:"h4"},"mapElement")),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Key"),(0,r.mdx)("th",{parentName:"tr",align:null},"Type"),(0,r.mdx)("th",{parentName:"tr",align:null},"Description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"element:key")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value")),(0,r.mdx)("td",{parentName:"tr",align:null},"The key of this element of a map")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"element:value")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"value")),(0,r.mdx)("td",{parentName:"tr",align:null},"The value of this element of a map")))),(0,r.mdx)("h3",{id:"extending-context-maps"},"Extending Context Maps"),(0,r.mdx)("p",null,"In some cases, mstch templates are not powerful enough to perform desired\noperations and the default context described above does not contain enough\ninformation to implement a feature for a given generator. If you would prefer\nto sort the fields of a struct alphabetically, or escape the names of structs\nin some way, that would not be possible using the default context alone. To\nsolve this, the generators support extending the default context with custom\ngenerator-defined elements to overcome these limitations."),(0,r.mdx)("h4",{id:"an-example-escaping"},"An Example: Escaping"),(0,r.mdx)("p",null,"Suppose the generated code for a given language needs to escape the name of each\nstruct before emitting. To accomplish this, we will override\n",(0,r.mdx)("inlineCode",{parentName:"p"},"t_mstch_generator::extend_struct")," in our subclass."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-cpp"},'mstch::map extend_struct(const t_struct& strct) const override {\n  return {\n    {"escapedName", my_escaping_function(strct.get_name())},\n  };\n}\n')),(0,r.mdx)("p",null,"Where ",(0,r.mdx)("inlineCode",{parentName:"p"},"my_escaping_function")," is some function that performs the desired\nescaping. From within templates now, as long as a struct is currently in scope,\n",(0,r.mdx)("inlineCode",{parentName:"p"},"{{struct:escapedName}}")," will refer to the escaped name as defined above, as the\nbuiltin ",(0,r.mdx)("inlineCode",{parentName:"p"},"dump")," functions are aware of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"extend_*")," functions."),(0,r.mdx)("h2",{id:"using-the-new-generator"},"Using the new generator"),(0,r.mdx)("p",null,"To invoke a mstch generator, run the following command:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"thrift --gen $MY_GENERATOR -o $OUT_DIR $THRIFT_SRC\n")),(0,r.mdx)("p",null,"Where ",(0,r.mdx)("inlineCode",{parentName:"p"},"MY_GENERATOR")," is the name of the generator as specified in the C++ driver,\n",(0,r.mdx)("inlineCode",{parentName:"p"},"OUT_DIR")," is the desired output directory, and ",(0,r.mdx)("inlineCode",{parentName:"p"},"THRIFT_SRC")," is the Thrift IDL\nsource file."),(0,r.mdx)("p",null,"Options can be specified as part of the string passed to ",(0,r.mdx)("inlineCode",{parentName:"p"},"--gen"),", for example:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sh"},"thrift --gen mstch_swift:option=value -o $PWD $PWD/test.thrift\n")))}s.isMDXComponent=!0}}]);